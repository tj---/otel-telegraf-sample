[agent]
  interval = "1s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "2s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""

# Receiving Graphite (Carbon) metrics (TCP)
# https://archive.docs.influxdata.com/telegraf/v1.7/concepts/data_formats_input/#graphite-data-format
[[inputs.socket_listener]]
  service_address = "tcp://:2013"
  data_format = "graphite"
  # The target metric will be named as measurement_measurement..._field
  # Rest of the components will be translated to dimensions
  # The matching is based on 8 part / 6 part metrics
  # Cluster.c891.node74.Diamond-Telegraf.foo.bar.weather.xyz
  # Cluster.lambda.gamma.greek.theta.alpha
  # Cluster.c891.node74.Diamond-Telegraf.temperature.max
#   templates = [
#     "*.*.*.*.*.*.*.* type.cluster_id.node_id.measurement.tkn4.measurement.tkn5.field",
#     "*.lambda.gamma.*.theta.* type.greek1.greek2.measurement.greek3.field",
#     "*.*.*.*.*.* type.cluster_id.node_id.tkn3.measurement.field"
#   ]

# Receiving Influx metrics (UDP)
[[inputs.socket_listener]]
  service_address = "udp://:8092"
  data_format = "influx"

# Not in use
#[[outputs.kafka]]
#  brokers = ["localhost:9092"]
#  topic = "telegraf-sample"
#  data_format = "influx"

# Enable this to create a Prometheus scraping endpoint for Prometheus server to scrape data from
# [[outputs.prometheus_client]]
#   listen = ":9273"

# Enable this to simulate Influx line protocol metrics being sent over http (for OTel Collector)
# (shouldn't really be needed, just as an experiment)
[[outputs.influxdb_v2]]
  urls = ["http://otel-collector:19000"]
  organization = "tel-org"
  bucket = "tel-bucket"
  data_format = "influx"
  content_encoding = "gzip"

  namedrop = [
    "some_d*",
  ]

  [outputs.influxdb_v2.tagpass]
    Hostess = ["0*"]

#[[outputs.http]]
#  url = "http://otel-collector:19000/api/v2/write"
#  data_format = "influx"

# Pushes the metrics to OTel grpc receiver (Note that http is not supported)
# [[outputs.opentelemetry]]
#   ## Override the default (localhost:4317) OpenTelemetry gRPC service
#   ## address:port
#   service_address = "host.docker.internal:4317"

# Channels the input graphite metrics to graphite configured at OTELs receiver
#[[outputs.graphite]]
#  servers = ["host.docker.internal:2003"]
#  prefix = ""

# Testing (stdout)
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
