[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""

# Receiving Graphite (Carbon) metrics (TCP)
# https://archive.docs.influxdata.com/telegraf/v1.7/concepts/data_formats_input/#graphite-data-format
[[inputs.socket_listener]]
  service_address = "tcp://:2013"
  data_format = "graphite"

# Receiving Influx metrics (UDP)
[[inputs.socket_listener]]
  service_address = "udp://:8092"
  data_format = "influx"

# Not in use
#[[outputs.kafka]]
#  brokers = ["localhost:9092"]
#  topic = "telegraf-sample"
#  data_format = "influx"

# Enable this to create a Prometheus scraping endpoint for Prometheus server to scrape data from
# [[outputs.prometheus_client]]
#   listen = ":9273"

# Enable this to simulate Influx line protocol metrics being sent over http (for OTel Collector)
# (shouldn't really be needed, just as an experiment)
#[[outputs.influxdb_v2]]
#  urls = ["http://otel-collector:19000"]
#  organization = "tel-org"
#  bucket = "tel-bucket"

# Pushes the metrics to OTel grpc receiver
[[outputs.opentelemetry]]
  ## Override the default (localhost:4317) OpenTelemetry gRPC service
  ## address:port
  service_address = "host.docker.internal:4317"

# Testing (stdout)
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
